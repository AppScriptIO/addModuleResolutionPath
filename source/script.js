"use strict";const path = require('path'),
moduleSystem = require('module'),
jsEntrypointPath = path.dirname(require.main.filename);





function addModuleResolutionPath({
  nodeModulePath })
{





  process.env.NODE_PATH = `${process.env.NODE_PATH || ''}${path.delimiter}${nodeModulePath}`;
  process.env.NODE_PATH = process.env.NODE_PATH.replace(new RegExp(`/(^\\${path.delimiter}+)/`), '');


  moduleSystem._initPaths();
}


function addModuleResolutionPathMultiple({ pathArray = [] }) {
  for (let nodeModulePath of pathArray) {
    addModuleResolutionPath({ nodeModulePath });
  }


  let nodePathArray = process.env.NODE_PATH.split(path.delimiter);
  let nodePathFormatted = '\t'.concat(nodePathArray.join('\n\t'));


}




module.exports = {
  addModuleResolutionPath,
  addModuleResolutionPathMultiple };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9zY3JpcHQuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJtb2R1bGVTeXN0ZW0iLCJqc0VudHJ5cG9pbnRQYXRoIiwiZGlybmFtZSIsIm1haW4iLCJmaWxlbmFtZSIsImFkZE1vZHVsZVJlc29sdXRpb25QYXRoIiwibm9kZU1vZHVsZVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9QQVRIIiwiZGVsaW1pdGVyIiwicmVwbGFjZSIsIlJlZ0V4cCIsIl9pbml0UGF0aHMiLCJhZGRNb2R1bGVSZXNvbHV0aW9uUGF0aE11bHRpcGxlIiwicGF0aEFycmF5Iiwibm9kZVBhdGhBcnJheSIsInNwbGl0Iiwibm9kZVBhdGhGb3JtYXR0ZWQiLCJjb25jYXQiLCJqb2luIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImFBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjtBQUNFQyxZQUFZLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBRHhCO0FBRUVFLGdCQUFnQixHQUFHSCxJQUFJLENBQUNJLE9BQUwsQ0FBYUgsT0FBTyxDQUFDSSxJQUFSLENBQWFDLFFBQTFCLENBRnJCOzs7Ozs7QUFRQSxTQUFTQyx1QkFBVCxDQUFpQztBQUMvQkMsRUFBQUEsY0FEK0IsRUFBakM7QUFFRzs7Ozs7O0FBTURDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLEdBQXlCLEdBQUVGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLElBQXlCLEVBQUcsR0FBRVgsSUFBSSxDQUFDWSxTQUFVLEdBQUVKLGNBQWUsRUFBekY7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQVosR0FBd0JGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLENBQXNCRSxPQUF0QixDQUE4QixJQUFJQyxNQUFKLENBQVksUUFBT2QsSUFBSSxDQUFDWSxTQUFVLEtBQWxDLENBQTlCLEVBQXVFLEVBQXZFLENBQXhCOzs7QUFHQVYsRUFBQUEsWUFBWSxDQUFDYSxVQUFiO0FBQ0Q7OztBQUdELFNBQVNDLCtCQUFULENBQXlDLEVBQUVDLFNBQVMsR0FBRyxFQUFkLEVBQXpDLEVBQTZEO0FBQzNELE9BQUssSUFBSVQsY0FBVCxJQUEyQlMsU0FBM0IsRUFBc0M7QUFDcENWLElBQUFBLHVCQUF1QixDQUFDLEVBQUVDLGNBQUYsRUFBRCxDQUF2QjtBQUNEOzs7QUFHRCxNQUFJVSxhQUFhLEdBQUdULE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLENBQXNCUSxLQUF0QixDQUE0Qm5CLElBQUksQ0FBQ1ksU0FBakMsQ0FBcEI7QUFDQSxNQUFJUSxpQkFBaUIsR0FBRyxLQUFLQyxNQUFMLENBQVlILGFBQWEsQ0FBQ0ksSUFBZCxDQUFtQixNQUFuQixDQUFaLENBQXhCOzs7QUFHRDs7Ozs7QUFLREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZqQixFQUFBQSx1QkFEZTtBQUVmUyxFQUFBQSwrQkFGZSxFQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyksXHJcbiAgbW9kdWxlU3lzdGVtID0gcmVxdWlyZSgnbW9kdWxlJyksXHJcbiAganNFbnRyeXBvaW50UGF0aCA9IHBhdGguZGlybmFtZShyZXF1aXJlLm1haW4uZmlsZW5hbWUpIC8vIGVudHJ5cG9pbnQgZGlyZWN0b3J5IHBhdGggKGN1cnJlbnQgbm9kZWpzIHByb2Nlc3Mgcm9vdCBwYXRoKVxyXG5cclxuLy8gYWRkIHJvb3QgcGF0aCAoYXBwIGJhc2UgcGF0aCkgdG8gdGhlIHJlc29sdmVkIG1vZHVsZSBwYXRocy5cclxuLy8gRGVmaW5lIHNlcnZlciBiYXNlIHBhdGguIEhhY2tpc2ggd2F5IHRvIG1ha2Ugc3VyZSB0aGUgcGF0aCBpcyBhbHdheXMgY29uc2lzdGVudC4gQmFzZSBwYXRoIGluIE5vZGVqcyBpcyB3aGVyZSB0aGUgY2xvc2VzdCBwYXJlbnQgbm9kZV9tb2R1bGVzIGlzIGxvY2F0ZWQgdG8gdGhlIGluaXRpYXRlZCBqcyBzY3JpcHQuXHJcbi8vICcke2FwcFJvb3RQYXRofScgYWxsb3dzIGZvciBmb2xkZXJzL21vZHVsZXMgaW5zaWRlIHRoZSBtYWluIGZvbGRlciB0byBiZSBjYWxsZWQgd2l0aCBvdXQgdXNpbmcgcmVsYXRpdmUgcGF0aHMuXHJcbi8vICcke2FwcFJvb3RQYXRofS9ub2RlX21vZHVsZXMnIGFsbG93cyBmb3IgbW9kdWxlcyBmcm9tIHVwcGVyIGhlcmFyY2hpZXMgdG8gY2FsbCBtb2R1bGVzIGZyb20gc2libGluZyBmb2xkZXJzLiBlLmcuIHNvdXJjZS94IGNhbGxzIHNvdXJjZS95L25vZGVfbW9kdWxlcy9tb2R1bGVcclxuZnVuY3Rpb24gYWRkTW9kdWxlUmVzb2x1dGlvblBhdGgoe1xyXG4gIG5vZGVNb2R1bGVQYXRoLCAvLyBwYXRoIHRvIGFkZCB0byB0aGUgbm9kZSBtb2R1bGUgcmVzb2x1dGlvbiBwYXRoc1xyXG59KSB7XHJcbiAgLyogQWRkaW5nIHRoZSBkZWZhdWx0IG5vZGVfbW9kdWxlcyBwYXRoIGlzbid0IG5lY2Vzc2FyeSBhbnltb3JlLCBhcyB0aGUgY3VycmVudCBiZWhhdmlvciAoYXQgbGVhc3QgdGhyb3VnaCBiYWJlbCkgaXMgdG8gbG9hZCBOT0RFX1BBVEggYXMgYWRkaXRpb25hbCByZXNvbHV0aW9uIHBhdGhzLCBhbmQgbm90IG92ZXJyaWRpbmcuXHJcbiAgICBhZGQgbm9kZWpzIGRlZmF1bHQgcGF0aCB0byBOT0RFX1BBVEgsIGkuZS4gXCJub2RlX21vZHVsZXNcIiAgKi9cclxuICAvLyBpZighcHJvY2Vzcy5lbnYuTk9ERV9QQVRIKSBwcm9jZXNzLmVudi5OT0RFX1BBVEggPSBgJHtqc0VudHJ5cG9pbnRQYXRofS9ub2RlX21vZHVsZXNgXHJcblxyXG4gIC8vIGFkZCBwYXRocyB0byB0aGUgTk9ERV9QQVRIIHN0cmluZ1xyXG4gIHByb2Nlc3MuZW52Lk5PREVfUEFUSCA9IGAke3Byb2Nlc3MuZW52Lk5PREVfUEFUSCB8fCAnJ30ke3BhdGguZGVsaW1pdGVyfSR7bm9kZU1vZHVsZVBhdGh9YFxyXG4gIHByb2Nlc3MuZW52Lk5PREVfUEFUSCA9IHByb2Nlc3MuZW52Lk5PREVfUEFUSC5yZXBsYWNlKG5ldyBSZWdFeHAoYC8oXlxcXFwke3BhdGguZGVsaW1pdGVyfSspL2ApLCAnJykgLy8gXCI6PHBhdGg+OjxwYXRoPlwiIC0+IFwiPHBhdGg+OjxwYXRoPlwiIHJlbW92ZSBlbXB0eSBzZWN0aW9uIGluIHRoZSBiZWdpbm5pbmcgaW4gY2FzZSBOT0RFX1BBVEggd2FzIHVuZGVmaW5lZC5cclxuXHJcbiAgLy8gTG9hZCBuZXcgTk9ERV9QQVRIIHZhcmlhYmxlXHJcbiAgbW9kdWxlU3lzdGVtLl9pbml0UGF0aHMoKSAvLyByZWZsZWN0IGNoYW5nZSBvbiB0aGUgcnVubmluZyBhcHAuXHJcbn1cclxuXHJcbi8vIGludGVyZmFjZSBmb3IgbXVsdGlwbGUgcGF0aHNcclxuZnVuY3Rpb24gYWRkTW9kdWxlUmVzb2x1dGlvblBhdGhNdWx0aXBsZSh7IHBhdGhBcnJheSA9IFtdIH0pIHtcclxuICBmb3IgKGxldCBub2RlTW9kdWxlUGF0aCBvZiBwYXRoQXJyYXkpIHtcclxuICAgIGFkZE1vZHVsZVJlc29sdXRpb25QYXRoKHsgbm9kZU1vZHVsZVBhdGggfSlcclxuICB9XHJcblxyXG4gIC8vIExvZyBwYXRoc1xyXG4gIGxldCBub2RlUGF0aEFycmF5ID0gcHJvY2Vzcy5lbnYuTk9ERV9QQVRILnNwbGl0KHBhdGguZGVsaW1pdGVyKSAvLyBkZWZhdWx0IE5PREVfUEFUSCBpcyBjb21wb3NlZCBvZiBwYXRocyBzZXBhcmF0ZWQgYnkgc2VtaWNvbG9uIChvbmUgY29tcGxldGUgc3RyaW5nIG9mIHBhdGhzKS5cclxuICBsZXQgbm9kZVBhdGhGb3JtYXR0ZWQgPSAnXFx0Jy5jb25jYXQobm9kZVBhdGhBcnJheS5qb2luKCdcXG5cXHQnKSkgLy8gYWRkIGEgdGFiIGFuZCBsaW5lYnJlYWsgYmV0d2VlbiBwYXRoc1xyXG4gIC8vIGNvbnNvbGUuZ3JvdXAoYFxceDFiWzJtXFx4MWJbM20lcyBcXG4lc1xceDFiWzBtYCwgYOKAoiBOb2RlXFwncyBtb2R1bGUgcmVzb2x1dGlvbiBwYXRoczpgLCBgJHtub2RlUGF0aEZvcm1hdHRlZH1gKVxyXG4gIC8vIGNvbnNvbGUuZ3JvdXBFbmQoKVxyXG59XHJcblxyXG4vLyBsb2dnaW5nIHdyYXBwZXJcclxuLy8gVE9ETzogTG9nIGluc2lkZSBwcm94eS5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGFkZE1vZHVsZVJlc29sdXRpb25QYXRoLFxyXG4gIGFkZE1vZHVsZVJlc29sdXRpb25QYXRoTXVsdGlwbGUsXHJcbn1cclxuIl19